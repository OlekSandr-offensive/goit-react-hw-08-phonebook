{"version":3,"file":"static/js/ContactsViewLazy.0ee16e7d.chunk.js","mappings":"wOAAaA,EAAa,SAAAC,GAAK,OAAIA,EAAMC,Q,oBCyDzC,EA9CoB,WAClB,OAAyBC,EAAAA,EAAAA,MAAlBC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MAEHC,GACVC,EAAAA,EAAAA,KAAY,SAAAP,GAAK,OAAIA,KADvBM,SAAYA,UAGdE,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,SACR,CAACL,IAEJ,IAAMM,GAAUH,EAAAA,EAAAA,IAAYR,GAAYY,cAIlCC,EAAWN,EAFW,SAAAA,GAAQ,OAClCA,EAASL,QAAO,qBAAGY,KAAgBF,cAAcG,SAASJ,MAChCK,CAAoBT,GAAY,GAC5D,OACE,8BACGM,IACC,eAAII,UAAU,cAAd,SACGJ,EAASK,KAAI,gBAAGC,EAAH,EAAGA,GAAIL,EAAP,EAAOA,KAAMM,EAAb,EAAaA,OAAb,OACZ,2BACE,yBACGN,EADH,KACS,0BAAOM,QAEhB,mBAAQC,KAAK,SAASC,QAAS,kBAAMlB,EAAee,IAApD,sBAJOA,W,6CCtBN,SAASI,IACtB,IAAMlB,GAAWC,EAAAA,EAAAA,MACjB,GAAqBkB,EAAAA,EAAAA,MAAdC,GAAP,eACA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOZ,EAAP,KAAaa,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAON,EAAP,KAAeQ,EAAf,KAEcrB,GACVC,EAAAA,EAAAA,KAAY,SAAAP,GAAK,OAAIA,KADvBM,SAAYA,UAGdE,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,SACR,CAACL,IAEJ,IAAMwB,EAAqB,SAAAC,GACzB,MAAwBA,EAAMC,cAAtBjB,EAAR,EAAQA,KAAMkB,EAAd,EAAcA,MACd,OAAQlB,GACN,IAAK,OACHa,EAAQK,GACR,MACF,IAAK,SACHJ,EAAUI,GACV,MACF,QACE,SAIAC,EAAY,mCAAG,WAAMH,GAAN,oEACnBA,EAAMI,kBAEc3B,EAAS4B,MAC3B,SAAAC,GAAO,OAAIA,EAAQtB,KAAKuB,sBAAwBvB,EAAKuB,uBAJpC,gBAQjBC,EAAAA,GAAAA,MAAA,UAAexB,EAAf,6BACAyB,IATiB,uCAWXd,EAAW,CAAEX,KAAAA,EAAMM,OAAAA,IAXR,OAYjBf,GAASK,EAAAA,EAAAA,OACT6B,IAbiB,4CAAH,sDAiBZA,EAAQ,WACZZ,EAAQ,IACRC,EAAU,KAGZ,OACE,kBAAMX,UAAU,cAAcuB,SAAUP,EAAxC,WACE,qCAEE,kBACEZ,KAAK,OACLP,KAAK,OACL2B,QAAQ,yHACRC,MAAM,kcACNV,MAAOlB,EACP6B,SAAUd,EACVe,UAAQ,QAGZ,uCAEE,kBACEvB,KAAK,MACLP,KAAK,SACL2B,QAAQ,yFACRC,MAAM,giBACNV,MAAOZ,EACPuB,SAAUd,EACVe,UAAQ,QAGZ,mBAAQvB,KAAK,SAAb,4B,cC9DN,EAjBe,WACb,IAAMW,GAAQxB,EAAAA,EAAAA,IAAYR,GACpBK,GAAWC,EAAAA,EAAAA,MAEjB,OACE,mBAAOW,UAAU,SAAjB,mCAEE,kBACEI,KAAK,OACLP,KAAK,SACLkB,MAAOA,EACPW,SAAU,SAAAb,GAAK,OAAIzB,GAASwC,EAAAA,EAAAA,IAAaf,EAAMgB,OAAOd,e,QCX/C,SAASe,IACtB,OACE,iBAAK9B,UAAU,MAAf,WACE,uCACA,SAAC,EAAD,KACA,SAAC,KAAD,CAAgB+B,UAAW,OAC3B,sCACA,SAAC,EAAD,KACA,SAAC,EAAD,S","sources":["redux/contacts/filters-selectors.jsx","components/contacts/ContactList.jsx","components/contactForm/ContactForm.jsx","components/filter/Filter.jsx","views/ContactsView.jsx"],"sourcesContent":["export const getFilters = state => state.filter;\r\n","import './ContactList.css';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  useDeleteContactsMutation,\n  fetchAllContacts,\n} from '../../redux/contacts/contacts-slice';\nimport { getFilters } from '../../redux/contacts/filters-selectors';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport PropTypes from 'prop-types';\n\nconst ContactList = () => {\n  const [deleteContacts] = useDeleteContactsMutation();\n  const dispatch = useDispatch();\n  const {\n    contacts: { contacts },\n  } = useSelector(state => state);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const filters = useSelector(getFilters).toLowerCase();\n\n  const getFilteredContacts = contacts =>\n    contacts.filter(({ name }) => name.toLowerCase().includes(filters));\n  const filtered = contacts ? getFilteredContacts(contacts) : [];\n  return (\n    <>\n      {filtered && (\n        <ul className=\"ContactList\">\n          {filtered.map(({ id, name, number }) => (\n            <li key={id}>\n              <p>\n                {name}:<span>{number}</span>\n              </p>\n              <button type=\"button\" onClick={() => deleteContacts(id)}>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import { useState, useEffect } from 'react';\nimport {\n  useAddContactMutation,\n  fetchAllContacts,\n} from 'redux/contacts/contacts-slice';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './ContactForm.css';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const [AddContact] = useAddContactMutation();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const {\n    contacts: { contacts },\n  } = useSelector(state => state);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const handleInputChanged = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    const findContact = contacts.find(\n      contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n    );\n\n    if (findContact) {\n      toast.error(`${name} is already in contacts.`);\n      reset();\n    } else {\n      await AddContact({ name, number });\n      dispatch(fetchAllContacts());\n      reset();\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className=\"ContactForm\" onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          onChange={handleInputChanged}\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value={number}\n          onChange={handleInputChanged}\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilters } from '../../redux/contacts/filters-selectors';\nimport { changeFilter } from '../../redux/contacts/filters-reducer';\nimport './Filter.css';\n\nconst Filter = () => {\n  const value = useSelector(getFilters);\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"Filter\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={event => dispatch(changeFilter(event.target.value))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { ToastContainer } from 'react-toastify';\r\nimport ContactList from '../components/contacts/ContactList';\r\nimport ContactForm from '../components/contactForm/ContactForm';\r\nimport Filter from '../components/filter/Filter';\r\nimport '../App.css';\r\n\r\nexport default function ContactsView() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <ToastContainer autoClose={3000} />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n"],"names":["getFilters","state","filter","useDeleteContactsMutation","deleteContacts","dispatch","useDispatch","contacts","useSelector","useEffect","fetchAllContacts","filters","toLowerCase","filtered","name","includes","getFilteredContacts","className","map","id","number","type","onClick","ContactForm","useAddContactMutation","AddContact","useState","setName","setNumber","handleInputChanged","event","currentTarget","value","handleSubmit","preventDefault","find","contact","toLocaleLowerCase","toast","reset","onSubmit","pattern","title","onChange","required","changeFilter","target","ContactsView","autoClose"],"sourceRoot":""}