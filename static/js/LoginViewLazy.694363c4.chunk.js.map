{"version":3,"file":"static/js/LoginViewLazy.694363c4.chunk.js","mappings":"kPAuFA,UA7EkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOL,EAASM,GAClB,IAAK,WACH,OAAOJ,EAAYI,GACrB,QACE,SAmBN,OACE,4BACE,mHAEA,gBAAKC,UAAU,cAAf,UACE,kBAAMC,SApBS,SAAAC,GAEnB,GADAA,EAAMC,iBACFX,EAAMY,QAAU,GAAKV,EAASU,QAAU,EAK1C,OAJAC,EAAAA,eAAAA,IAAmBC,EAAe,SAClCC,EAAAA,EAAAA,OAAM,CACJC,KAAK,oFAITnB,GAASoB,EAAAA,EAAAA,IAAM,CAAEjB,MAAAA,EAAOE,SAAAA,KACxBL,GAASqB,EAAAA,EAAAA,MACTjB,EAAS,IACTE,EAAY,KAQsBK,UAAU,aAAaW,aAAa,MAAlE,WACE,+DAEE,kBACEC,KAAK,QACLC,GAAG,QACHf,KAAK,QACLC,MAAOP,EACPsB,SAAUlB,EACVmB,QAAQ,sBAIZ,qEAUE,kBACEH,KAAK,WACLC,GAAG,WACHf,KAAK,WACLC,MAAOL,EACPoB,SAAUlB,EACVmB,QAAQ,uCACRC,MAAM,mHAIV,mBAAQJ,KAAK,SAAb,gD,mFC5EK,SAASK,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAG1B,QAEToB,GAAKQ,EAAKvB,SAAWe,GAH4BS,GAAK,IAK5D,MAAOM,GACPL,GAAK,EACLH,EAAKQ,EACL,QACA,IACON,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBT,EAAKC,KAAM,EAAAgB,EAAA,GAA2BjB,EAAKC,IGLjF,WACb,MAAM,IAAIiB,UAAU,6IHIgF","sources":["views/LoginView.jsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn, fetchCurrentUser } from '../redux/auth/auth-operation';\nimport { alert, defaultModules } from '@pnotify/core';\nimport '@pnotify/core/dist/PNotify.css';\nimport * as PNotifyMobile from '@pnotify/mobile';\nimport '@pnotify/mobile/dist/PNotifyMobile.css';\nimport '../components/contactForm/ContactForm.css';\n\nconst LoginView = () => {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (email.length <= 0 || password.length <= 0) {\n      defaultModules.set(PNotifyMobile, {});\n      alert({\n        text: `Заповніть поля`,\n      });\n      return;\n    }\n    dispatch(logIn({ email, password }));\n    dispatch(fetchCurrentUser());\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div>\n      <h1>Сторінка логіна</h1>\n\n      <div className=\"ContactForm\">\n        <form onSubmit={handleSubmit} className=\"form-input\" autoComplete=\"off\">\n          <label>\n            Пошта\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={handleChange}\n              pattern=\"[^ @]*@[^ @]*\"\n              // required\n            />\n          </label>\n          <label>\n            Пароль\n            {/* <input\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={handleChange}\n              minlength=\"8\"\n              required\n            /> */}\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={handleChange}\n              pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n              title=\"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\"\n              // required\n            ></input>\n          </label>\n          <button type=\"submit\">Вхід</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginView;\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["dispatch","useDispatch","useState","email","setEmail","password","setPassword","handleChange","target","name","value","className","onSubmit","event","preventDefault","length","defaultModules","PNotifyMobile","alert","text","logIn","fetchCurrentUser","autoComplete","type","id","onChange","pattern","title","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}